q()
demo()
demi(image)
demo(image)
install.packages("slidify")
install.packages("KernSmooth")
library(kernsmooth)
library(KernSmooth)
pwd
getwd()
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinv <- function(solve) i <<- solve
getinv <- function() i
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i<- x$getinv()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i<- solve(data, ...)
x$setinv(i)
i
}
cachesolve(4)
cacheSolve(6)
x <- list(a = 1:5, b = rnorm(10))
lapply(x, mean)
help rnorm
?rnorm
?split
x
a
$a
x <- list(a = 1:1000, b = rnorm(100000))
lapply(x, mean)
x
lapply(x, mean)
x <- 1:4
lapply(x, runif)
lapply(x, runif, min = 0, max = 10)
lapply(x, runif, min = 0, max = 100)
printmessage <- function(x{})
printmessage <- function(x{})
printmessage <- function(x) {}
printmessage <- function(x) {if(x > 0) print"x is greater than 0"}
install.packages("swirl")
library(swirl)
swirl()
num_vect <- (0.55, 55, -10, 6)
num_vect <- (0.5, 55, -10, 6)
help
num_vect <- c(0.5, 55, -10, 6)
num_vect
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Tim")
my_name
paste(my_name, collapse =" ")
paste("Hello, "world!", sep = " "")
paste("Hello, "world!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
info()
plot(x = cars$speed, y = cars#dist, main = "My Plot")
df
plot(x = cars$speed, y = cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, subtitle = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2, red)
plot(cars, red,col = 2)
plot(cars,col = 2)
plot(cars, xlim =c(10, 15))
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
pwd
setwd("C:/MyFiles/Stanford/Data Cleaning/CleaningData")
library("reshape2")
## I need to read all of the data in this step
## the basedirectory is  UCI HAR Dataset/
activity_labels <- read.table("UCI HAR Dataset/activity_labels.txt")
features <- read.table("UCI HAR Dataset/features.txt")
features <- features[2]
features <- as.vector(features[,1])
x_test <- read.table("UCI HAR Dataset/test/X_test.txt", colClasses = c("numeric"), col.names = features) ## 2947 obs of 561 vars
y_test <- read.table("UCI HAR Dataset/test/y_test.txt") ## 2947 obs of 1 var
subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt") ## 2947 obs of 1 v
## take only the columns we want
x_test <- x_test[c(201, 202, 214, 215, 227, 228, 240, 241, 253, 254, 503, 504, 516, 517, 529, 530, 542, 543)]
x_test[,"activity"] <- y_test
x_test$activity <- as.factor(x_test$activity)
x_test[, "subject"] <- subject_test
x_test$subject <- as.factor(x_test$subject)
## Ugly but it will do
x_test$activity_labels <- x_test$activity
x_test$activity_labels <- factor(x_test$activity_labels, levels = c(1,2,3,4,5,6),
labels = c("WALKING","WALKING_UPSTAIRS",
"WALKING_DOWNSTAIRS","SITTING",
"STANDING","LAYING"))
x_train <- read.table("UCI HAR Dataset/train/X_train.txt", colClasses = c("numeric"), col.names = features) ## 7352 of 561 v
y_train <- read.table("UCI HAR Dataset/train/y_train.txt") ## 7352 of 1 v
subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt") ## 7352 of 1 v
x_train <- x_train[c(201, 202, 214, 215, 227, 228, 240, 241, 253, 254, 503, 504, 516, 517, 529, 530, 542, 543)]
x_train[,"activity"] <- y_train
x_train$activity <- as.factor(x_train$activity)
x_train[, "subject"] <- subject_train
x_train$subject <- as.factor(x_train$subject)
x_train$activity_labels <- x_train$activity
x_train$activity_labels <- factor(x_train$activity_labels, levels = c(1,2,3,4,5,6),
labels = c("WALKING","WALKING_UPSTAIRS",
"WALKING_DOWNSTAIRS","SITTING",
"STANDING","LAYING"))
## Step 1-2:
## merge all data, free up memory
all_data <- rbind(x_test, x_train)
#
rm(subject_test)
rm(x_test)
rm(y_test)
rm(subject_train)
rm(x_train)
rm(y_train)
rm(features)
#Perform the aggregation on the combined dataset, ignore errors... probably messed something up.
agg_all <- aggregate(all_data, by= list(all_data$activity_labels, all_data$subject), FUN = mean, na.rm = FALSE)
#write the file out.
write.table(agg_all, file="tidy_HCI_data.txt", row.name=FALSE)
